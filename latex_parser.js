latex_parser = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = function(res) { return res; },
        peg$c2 = "+",
        peg$c3 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c4 = function(left, right) { return left + '+' + right; },
        peg$c5 = "-",
        peg$c6 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c7 = function(left, right) { return left + '-' + right; },
        peg$c8 = function(right) { return '-' + right; },
        peg$c9 = null,
        peg$c10 = "*",
        peg$c11 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c12 = function(left, right) { return left + '*' + right; },
        peg$c13 = "/",
        peg$c14 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c15 = function(left, right) { return left + '/' + right; },
        peg$c16 = "^",
        peg$c17 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c18 = function(left, right) { return left + '^' + right; },
        peg$c19 = "\\left",
        peg$c20 = { type: "literal", value: "\\left", description: "\"\\\\left\"" },
        peg$c21 = "(",
        peg$c22 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c23 = "\\right",
        peg$c24 = { type: "literal", value: "\\right", description: "\"\\\\right\"" },
        peg$c25 = ")",
        peg$c26 = { type: "literal", value: ")", description: "\")\"" },
        peg$c27 = function(additive) { return '(' + additive + ')'; },
        peg$c28 = "|",
        peg$c29 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c30 = function(additive) { return 'abs(' + additive + ')'; },
        peg$c31 = "{",
        peg$c32 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c33 = "}",
        peg$c34 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c35 = /^[a-z]/,
        peg$c36 = { type: "class", value: "[a-z]", description: "[a-z]" },
        peg$c37 = function(letter) { return letter; },
        peg$c38 = "\\sqrt",
        peg$c39 = { type: "literal", value: "\\sqrt", description: "\"\\\\sqrt\"" },
        peg$c40 = function(pr) { return "sqrt(" + pr + ")"; },
        peg$c41 = "[",
        peg$c42 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c43 = "]",
        peg$c44 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c45 = function(pw, pr) { return pr + "^ (1/(" + pw + "))"; },
        peg$c46 = "\\frac",
        peg$c47 = { type: "literal", value: "\\frac", description: "\"\\\\frac\"" },
        peg$c48 = function(num, den) { return num + "/" + den; },
        peg$c49 = "\\sin",
        peg$c50 = { type: "literal", value: "\\sin", description: "\"\\\\sin\"" },
        peg$c51 = function(pr) { return "sin(" + pr + ")"; },
        peg$c52 = "\\cos",
        peg$c53 = { type: "literal", value: "\\cos", description: "\"\\\\cos\"" },
        peg$c54 = function(pr) { return "cos(" + pr + ")"; },
        peg$c55 = "\\tan",
        peg$c56 = { type: "literal", value: "\\tan", description: "\"\\\\tan\"" },
        peg$c57 = function(pr) { return "tan(" + pr + ")"; },
        peg$c58 = "\\cot",
        peg$c59 = { type: "literal", value: "\\cot", description: "\"\\\\cot\"" },
        peg$c60 = function(pr) { return "ctg(" + pr + ")"; },
        peg$c61 = "\\a",
        peg$c62 = { type: "literal", value: "\\a", description: "\"\\\\a\"" },
        peg$c63 = "rc",
        peg$c64 = { type: "literal", value: "rc", description: "\"rc\"" },
        peg$c65 = "sin",
        peg$c66 = { type: "literal", value: "sin", description: "\"sin\"" },
        peg$c67 = function(pr) { return "arcsin(" + pr + ")"; },
        peg$c68 = "cos",
        peg$c69 = { type: "literal", value: "cos", description: "\"cos\"" },
        peg$c70 = function(pr) { return "arccos(" + pr + ")"; },
        peg$c71 = "tan",
        peg$c72 = { type: "literal", value: "tan", description: "\"tan\"" },
        peg$c73 = function(pr) { return "arctan(" + pr + ")"; },
        peg$c74 = "cot",
        peg$c75 = { type: "literal", value: "cot", description: "\"cot\"" },
        peg$c76 = function(pr) { return "arcctg(" + pr + ")"; },
        peg$c77 = "\\ln",
        peg$c78 = { type: "literal", value: "\\ln", description: "\"\\\\ln\"" },
        peg$c79 = function(pr) { return "ln(" + pr + ")"; },
        peg$c80 = "\\log",
        peg$c81 = { type: "literal", value: "\\log", description: "\"\\\\log\"" },
        peg$c82 = "_",
        peg$c83 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c84 = function(base, pr) { return "log(" + pr + ", " + base + ")"; },
        peg$c85 = "\\lfloor",
        peg$c86 = { type: "literal", value: "\\lfloor", description: "\"\\\\lfloor\"" },
        peg$c87 = "\\rfloor",
        peg$c88 = { type: "literal", value: "\\rfloor", description: "\"\\\\rfloor\"" },
        peg$c89 = function(pr) { return "floor(" + pr + ")"; },
        peg$c90 = "\\lceil",
        peg$c91 = { type: "literal", value: "\\lceil", description: "\"\\\\lceil\"" },
        peg$c92 = "\\rceil",
        peg$c93 = { type: "literal", value: "\\rceil", description: "\"\\\\rceil\"" },
        peg$c94 = function(pr) { return "ceil(" + pr + ")"; },
        peg$c95 = "\\pi",
        peg$c96 = { type: "literal", value: "\\pi", description: "\"\\\\pi\"" },
        peg$c97 = function() { return "pi"; },
        peg$c98 = "\\",
        peg$c99 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c100 = "var",
        peg$c101 = { type: "literal", value: "var", description: "\"var\"" },
        peg$c102 = "phi",
        peg$c103 = { type: "literal", value: "phi", description: "\"phi\"" },
        peg$c104 = function() { return "phi"; },
        peg$c105 = [],
        peg$c106 = /^[0-9]/,
        peg$c107 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c108 = function(digits) { return digits.join(""); },
        peg$c109 = /^[ ]/,
        peg$c110 = { type: "class", value: "[ ]", description: "[ ]" },
        peg$c111 = "\\:",
        peg$c112 = { type: "literal", value: "\\:", description: "\"\\\\:\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parseexpr();

      return s0;
    }

    function peg$parseexpr() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsedel();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseadd();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c1(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseadd() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsemul();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s2 = peg$c2;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedel();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseadd();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedel();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c4(s1, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsemul();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s2 = peg$c5;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedel();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseadd();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsedel();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c7(s1, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c5;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsedel();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseadd();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsedel();
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c8(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parsemul();
          }
        }
      }

      return s0;
    }

    function peg$parsemul() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsepow();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s2 = peg$c10;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c11); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c9;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedel();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsemul();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedel();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c12(s1, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsepow();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s2 = peg$c13;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedel();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsemul();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsedel();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c15(s1, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsepow();
        }
      }

      return s0;
    }

    function peg$parsepow() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseprimary();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 94) {
          s2 = peg$c16;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedel();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseprimary();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedel();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c18(s1, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseprimary();
      }

      return s0;
    }

    function peg$parseprimary() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$parseint();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c19) {
          s1 = peg$c19;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s1 === peg$FAILED) {
          s1 = peg$c9;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c21;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedel();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseadd();
              if (s4 !== peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c23) {
                  s5 = peg$c23;
                  peg$currPos += 6;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c24); }
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$c9;
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s6 = peg$c25;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c26); }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsedel();
                    if (s7 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c27(s4);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c19) {
            s1 = peg$c19;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
          if (s1 === peg$FAILED) {
            s1 = peg$c9;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 124) {
              s2 = peg$c28;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c29); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsedel();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseadd();
                if (s4 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c23) {
                    s5 = peg$c23;
                    peg$currPos += 6;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                  }
                  if (s5 === peg$FAILED) {
                    s5 = peg$c9;
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 124) {
                      s6 = peg$c28;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c29); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsedel();
                      if (s7 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c30(s4);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
              s1 = peg$c31;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsedel();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseadd();
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s4 = peg$c33;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c34); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsedel();
                    if (s5 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c27(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parsecommand();
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (peg$c35.test(input.charAt(peg$currPos))) {
                  s1 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c36); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsedel();
                  if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c37(s1);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecommand() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c38) {
        s1 = peg$c38;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedel();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseprimary();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c40(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c38) {
          s1 = peg$c38;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedel();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 91) {
              s3 = peg$c41;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c42); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsedel();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseadd();
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s6 = peg$c43;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c44); }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsedel();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseprimary();
                      if (s8 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c45(s5, s8);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c46) {
            s1 = peg$c46;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsedel();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseprimary();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseprimary();
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c48(s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c49) {
              s1 = peg$c49;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c50); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsedel();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseprimary();
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c51(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 4) === peg$c52) {
                s1 = peg$c52;
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c53); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsedel();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseprimary();
                  if (s3 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c54(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c55) {
                  s1 = peg$c55;
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c56); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsedel();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseprimary();
                    if (s3 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c57(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 4) === peg$c58) {
                    s1 = peg$c58;
                    peg$currPos += 4;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c59); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsedel();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseprimary();
                      if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c60(s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c61) {
                      s1 = peg$c61;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c62); }
                    }
                    if (s1 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c63) {
                        s2 = peg$c63;
                        peg$currPos += 2;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c64); }
                      }
                      if (s2 === peg$FAILED) {
                        s2 = peg$c9;
                      }
                      if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c65) {
                          s3 = peg$c65;
                          peg$currPos += 3;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c66); }
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsedel();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseprimary();
                            if (s5 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c67(s5);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c61) {
                        s1 = peg$c61;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c62); }
                      }
                      if (s1 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c63) {
                          s2 = peg$c63;
                          peg$currPos += 2;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c64); }
                        }
                        if (s2 === peg$FAILED) {
                          s2 = peg$c9;
                        }
                        if (s2 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c68) {
                            s3 = peg$c68;
                            peg$currPos += 3;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c69); }
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parsedel();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parseprimary();
                              if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c70(s5);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c61) {
                          s1 = peg$c61;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c62); }
                        }
                        if (s1 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c63) {
                            s2 = peg$c63;
                            peg$currPos += 2;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c64); }
                          }
                          if (s2 === peg$FAILED) {
                            s2 = peg$c9;
                          }
                          if (s2 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c71) {
                              s3 = peg$c71;
                              peg$currPos += 3;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c72); }
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parsedel();
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parseprimary();
                                if (s5 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c73(s5);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 2) === peg$c61) {
                            s1 = peg$c61;
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c62); }
                          }
                          if (s1 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c63) {
                              s2 = peg$c63;
                              peg$currPos += 2;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c64); }
                            }
                            if (s2 === peg$FAILED) {
                              s2 = peg$c9;
                            }
                            if (s2 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 3) === peg$c74) {
                                s3 = peg$c74;
                                peg$currPos += 3;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c75); }
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parsedel();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parseprimary();
                                  if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c76(s5);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 3) === peg$c77) {
                              s1 = peg$c77;
                              peg$currPos += 3;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c78); }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parsedel();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseprimary();
                                if (s3 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c79(s3);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 4) === peg$c80) {
                                s1 = peg$c80;
                                peg$currPos += 4;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c81); }
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parsedel();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parseprimary();
                                  if (s3 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c79(s3);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 4) === peg$c80) {
                                  s1 = peg$c80;
                                  peg$currPos += 4;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c81); }
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parsedel();
                                  if (s2 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 95) {
                                      s3 = peg$c82;
                                      peg$currPos++;
                                    } else {
                                      s3 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c83); }
                                    }
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parsedel();
                                      if (s4 !== peg$FAILED) {
                                        s5 = peg$parseprimary();
                                        if (s5 !== peg$FAILED) {
                                          s6 = peg$parsedel();
                                          if (s6 !== peg$FAILED) {
                                            s7 = peg$parseprimary();
                                            if (s7 !== peg$FAILED) {
                                              peg$reportedPos = s0;
                                              s1 = peg$c84(s5, s7);
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.substr(peg$currPos, 7) === peg$c85) {
                                    s1 = peg$c85;
                                    peg$currPos += 7;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c86); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parsedel();
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parseadd();
                                      if (s3 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 7) === peg$c87) {
                                          s4 = peg$c87;
                                          peg$currPos += 7;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c88); }
                                        }
                                        if (s4 !== peg$FAILED) {
                                          s5 = peg$parsedel();
                                          if (s5 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c89(s3);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 6) === peg$c90) {
                                      s1 = peg$c90;
                                      peg$currPos += 6;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c91); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parsedel();
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$parseadd();
                                        if (s3 !== peg$FAILED) {
                                          if (input.substr(peg$currPos, 6) === peg$c92) {
                                            s4 = peg$c92;
                                            peg$currPos += 6;
                                          } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c93); }
                                          }
                                          if (s4 !== peg$FAILED) {
                                            s5 = peg$parsedel();
                                            if (s5 !== peg$FAILED) {
                                              peg$reportedPos = s0;
                                              s1 = peg$c94(s3);
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.substr(peg$currPos, 3) === peg$c95) {
                                        s1 = peg$c95;
                                        peg$currPos += 3;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c96); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parsedel();
                                        if (s2 !== peg$FAILED) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c97();
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 92) {
                                          s1 = peg$c98;
                                          peg$currPos++;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c99); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          if (input.substr(peg$currPos, 3) === peg$c100) {
                                            s2 = peg$c100;
                                            peg$currPos += 3;
                                          } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c101); }
                                          }
                                          if (s2 === peg$FAILED) {
                                            s2 = peg$c9;
                                          }
                                          if (s2 !== peg$FAILED) {
                                            if (input.substr(peg$currPos, 3) === peg$c102) {
                                              s3 = peg$c102;
                                              peg$currPos += 3;
                                            } else {
                                              s3 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c103); }
                                            }
                                            if (s3 !== peg$FAILED) {
                                              s4 = peg$parsedel();
                                              if (s4 !== peg$FAILED) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c104();
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseint() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c106.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c107); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c106.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c107); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedel();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c108(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedel() {
      var s0, s1;

      s0 = [];
      if (peg$c109.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c110); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c109.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c110); }
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c111) {
          s0 = peg$c111;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c112); }
        }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
